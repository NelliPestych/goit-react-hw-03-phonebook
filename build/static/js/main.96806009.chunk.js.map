{"version":3,"sources":["serviceWorker.js","addNomber.js","createNumber.js","Contacts.js","Filter.js","Phonebook.js","index.js"],"names":["Boolean","window","location","hostname","match","AddNomber","nomberEditor","type","onClick","createNumber","id","uuid","completed","Contacts","contactsAll","onRemoveTask","map","name","number","key","Filter","searchAll","Phonebook","state","contacts","search","addContact","phoneNumber","setState","prevState","removeContact","contactId","filter","inputChange1","e","preventDefault","target","value","inputChange2","inputChange3","findNumber","contact","persistedContacts","localStorage","getItem","this","JSON","parse","prevProps","setItem","stringify","onChange","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCChBS,SAASC,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,aAChC,OACI,6BACI,4BAAQC,KAAK,SAASC,QAASF,GAA/B,qD,WCAG,SAASG,IACtB,MAAO,CACLC,GAAIC,iBACJC,WAAW,GCNf,IAaeC,EAbE,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACf,4BACGD,EAAYE,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACf,wBAAIC,IAAKT,GACP,2BAAIO,EAAJ,IAAWC,GACX,4BAAQX,KAAK,SAASC,QAAS,kBAAMO,EAAaL,KAAlD,oDCKOU,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACGA,EAAUL,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACb,wBAAIC,IAAKT,GACP,2BAAIO,EAAJ,IAAWC,SCcEI,E,4MACnBC,MAAQ,CACNC,SAAU,CACR,CAAEd,GAAI,OAAQO,KAAM,gBAAiBC,OAAQ,aAC7C,CAAER,GAAI,OAAQO,KAAM,iBAAkBC,OAAQ,aAC9C,CAAER,GAAI,OAAQO,KAAM,gBAAiBC,OAAQ,aAC7C,CAAER,GAAI,OAAQO,KAAM,iBAAkBC,OAAQ,cAEhDD,KAAM,GACNC,OAAQ,GACRO,OAAQ,I,EAkBVC,WAAa,WACX,IAAMC,EAAclB,IACpB,EAAKmB,UAAS,SAACC,GACb,MAAO,CACLL,SAAS,CACP,CAAEd,GAAIiB,EAAaV,KAAM,EAAKM,MAAMN,KAAMC,OAAQ,EAAKK,MAAML,SADvD,mBAEHW,EAAUL,gB,EAMrBM,cAAgB,SAACC,GACf,EAAKH,UAAS,SAACC,GACb,MAAO,CACLL,SAAUK,EAAUL,SAASQ,QAAO,qBAAGtB,KAAgBqB,U,EAK7DE,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKP,SAAS,CAAEX,KAAMiB,EAAEE,OAAOC,S,EAGjCC,aAAe,SAACJ,GACdA,EAAEC,iBACF,EAAKP,SAAS,CAAEV,OAAQgB,EAAEE,OAAOC,S,EAGnCE,aAAe,SAACL,GACdA,EAAEC,iBACF,IAAMK,EAAa,EAAKjB,MAAMC,SAASQ,QAAO,SAACS,GAAD,OAAaA,EAAQxB,OAASiB,EAAEE,OAAOC,SACrF,EAAKT,SAAS,CAAEH,OAAO,YAAKe,M,kEA/C5B,IAAME,EAAoBC,aAAaC,QAAQ,YAC3CF,GACFG,KAAKjB,SAAS,CACZJ,SAAUsB,KAAKC,MAAML,O,yCAKRM,EAAWnB,GACxBA,EAAUL,WAAaqB,KAAKtB,MAAMC,UACpCmB,aAAaM,QAAQ,WAAYH,KAAKI,UAAUL,KAAKtB,MAAMC,a,+BA2CrD,IACAA,EAAaqB,KAAKtB,MAAlBC,SACR,OACE,6BACE,yCACA,2BACEjB,KAAK,OACL8B,MAAOQ,KAAKtB,MAAMN,KAClBkC,SAAUN,KAAKZ,eAEjB,2BACE1B,KAAK,OACL8B,MAAOQ,KAAKtB,MAAML,OAClBiC,SAAUN,KAAKP,eAEjB,kBAACjC,EAAD,CAAWC,aAAcuC,KAAKnB,aAE9B,wCACA,kBAAC,EAAD,CAAQL,UAAWwB,KAAKtB,MAAME,SAC9B,2BAAOlB,KAAK,OAAO4C,SAAUN,KAAKN,eAClC,kBAAC,EAAD,CAAUzB,YAAaU,EAAUT,aAAc8B,KAAKf,gBACpD,iC,GAxF+BsB,IAAMC,WCb7CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.96806009.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nexport default function AddNomber({ nomberEditor }) {\r\n    return (\r\n        <div>\r\n            <button type=\"submit\" onClick={nomberEditor}>ДОБАВИТЬ</button>\r\n        </div>\r\n    )\r\n}","// import { LoremIpsum } from \"lorem-ipsum\";\r\nimport { uuid } from \"uuidv4\";\r\n\r\n// const Lorem = new LoremIpsum();\r\n\r\nexport default function createNumber() {\r\n  return {\r\n    id: uuid(),\r\n    completed: false,\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nconst Contacts = ({ contactsAll, onRemoveTask }) => (\r\n  <ul>\r\n    {contactsAll.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <p>{name} {number}</p>\r\n        <button type=\"button\" onClick={() => onRemoveTask(id)}>\r\n          Удалить\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Contacts;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Filter = ({ searchAll }) => (\r\n  <ul>\r\n    {searchAll.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <p>{name} {number}</p>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Filter;","import React, { Component } from \"react\";\r\nimport AddNomber from \"./addNomber\";\r\nimport createNumber from \"./createNumber\";\r\nimport Contacts from \"./Contacts\";\r\nimport Filter from \"./Filter\"\r\n// import Statistics from \"./Statistics\";\r\n// import Notification from \"./Notification\";\r\n\r\n// state = {\r\n//     contacts: [\r\n//       {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n//       {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n//       {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n//       {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n//     ],\r\n//     filter: '',\r\n//     name: '',\r\n//     number: ''\r\n//   }\r\n\r\nexport default class Phonebook extends React.Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    name: \"\",\r\n    number: \"\",\r\n    search: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\");\r\n    if (persistedContacts) {\r\n      this.setState({\r\n        contacts: JSON.parse(persistedContacts),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  addContact = () => {\r\n    const phoneNumber = createNumber();\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: [\r\n          { id: phoneNumber, name: this.state.name, number: this.state.number },\r\n          ...prevState.contacts,\r\n        ],\r\n      };\r\n    });\r\n  };\r\n\r\n  removeContact = (contactId) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  inputChange1 = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  inputChange2 = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  inputChange3 = (e) => {\r\n    e.preventDefault();\r\n    const findNumber = this.state.contacts.filter((contact) => contact.name === e.target.value);\r\n    this.setState({ search: [...findNumber] });\r\n  };\r\n  //   handleChange3 = (e) => {\r\n  //     this.setState({ bad: this.state.bad + 1 });\r\n  //   };\r\n\r\n  render() {\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.name}\r\n          onChange={this.inputChange1}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.number}\r\n          onChange={this.inputChange2}\r\n        />\r\n        <AddNomber nomberEditor={this.addContact} />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter searchAll={this.state.search} />\r\n        <input type=\"text\" onChange={this.inputChange3} />\r\n        <Contacts contactsAll={contacts} onRemoveTask={this.removeContact} />\r\n        <p></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Phonebook from \"./Phonebook\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Phonebook />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}